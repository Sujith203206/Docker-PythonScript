# -*- coding: utf-8 -*-
"""System Health Monitoring Script.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13SieBQcBJaIV133rtZRxNT4_AyzV7eO2
"""

import psutil
import smtplib
import logging
import time
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Setup logging to a file
logging.basicConfig(filename="system_health.log",
                    format="%(asctime)s - %(message)s",
                    level=logging.INFO)

# Email Configuration
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SENDER_EMAIL = "your_email@gmail.com"  # Replace with our email
SENDER_PASSWORD = "your_password"  # Replace with our password
RECIPIENT_EMAIL = "recipient_email@gmail.com"  # Replace with recipient email

# Thresholds for system health monitoring
CPU_THRESHOLD = 80
MEMORY_THRESHOLD = 80
DISK_THRESHOLD = 80
CHECK_INTERVAL = 10  # Check every 10 seconds

# Function to send an email alert
def send_email_alert(subject, body):
    try:
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = RECIPIENT_EMAIL
        msg['Subject'] = subject

        msg.attach(MIMEText(body, 'plain'))

        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            server.sendmail(SENDER_EMAIL, RECIPIENT_EMAIL, msg.as_string())
            print(f"Alert sent: {subject}")
    except Exception as e:
        logging.error(f"Failed to send alert email: {e}")

# Check CPU usage
def check_cpu():
    cpu_usage = psutil.cpu_percent(interval=1)
    if cpu_usage > CPU_THRESHOLD:
        message = f"High CPU usage detected: {cpu_usage}%"
        logging.warning(message)
        send_email_alert("CPU Usage Alert", message)
    return cpu_usage

# Check Memory usage
def check_memory():
    memory_info = psutil.virtual_memory()
    memory_usage = memory_info.percent
    if memory_usage > MEMORY_THRESHOLD:
        message = f"High Memory usage detected: {memory_usage}%"
        logging.warning(message)
        send_email_alert("Memory Usage Alert", message)
    return memory_usage

# Check Disk usage
def check_disk():
    disk_usage = psutil.disk_usage('/')
    disk_usage_percent = disk_usage.percent
    if disk_usage_percent > DISK_THRESHOLD:
        message = f"High Disk usage detected: {disk_usage_percent}%"
        logging.warning(message)
        send_email_alert("Disk Usage Alert", message)
    return disk_usage_percent

# Main function to monitor system health every 10 seconds
def monitor_system():
    while True:
        cpu_usage = check_cpu()
        memory_usage = check_memory()
        disk_usage = check_disk()

        print(f"CPU Usage: {cpu_usage}%")
        print(f"Memory Usage: {memory_usage}%")
        print(f"Disk Usage: {disk_usage}%")
        print("-" * 40)

        time.sleep(CHECK_INTERVAL)

if __name__ == "__main__":
    monitor_system()

